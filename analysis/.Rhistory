#please do not touch this chunk
knitr::opts_chunk$set(echo = TRUE, results = "hold",fig.width = 7, fig.height = 4)
if(!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr, ggplot2, plyr, tidyverse, pander, ggpubr, rapportools, knitr, pROC, reshape2)
# you need to put the data-set in the same folder
# where this .rmd file sits,
# which is here:
getwd()
sub_UKBB<-read.csv("/Users/supengyuan/Documents/GitHub/orientation/data/UKB_Phenotype/data_cleaned.csv")
dim(sub_UKBB) # This data covering 144756 participants and 11 variables of them (IID, FID, etc)
colnames(sub_UKBB) # 11 variables
summary(sub_UKBB)
head(sub_UKBB) # show part of the data
View(sub_UKBB)
q1_data = sub_UKBB %>%
mutate(
f.22001.0.0 = as.factor(f.22001.0.0)
)
summary(q1_data$f.22001.0.0)
View(sub_UKBB)
# Recode function:
recode <-function(df,column_name){
new_names<-c()
for (i in column_name){
new_column_name<-paste0(i,"_recode")
new_names<-c(new_names,new_column_name)
df[,new_column_name] <- revalue(df[,i], c("No, never"= 0,
"Yes, but not now, but have in the past"= 1,
"Yes, now some of the time"= 1,
"Yes, now a lot of the time"= 1,
"Yes, now most or all of the time"= 1,
"Prefer not to answer"= NA,
"Do not know"= NA ))
}
return (list(df=df,new_column_names=new_names))
}
# columns needs to be recoded:
column_name<-c("f.4803.0.0","f.4803.1.0","f.4803.2.0","f.4803.3.0")
# get a new data.frame with recoded columns added:
df_recode<-recode(df=sub_UKBB,column_name)$df
# get names of recoded columns:
new_column_names<-recode(df=sub_UKBB,column_name)$new_column_names
# show recode summary:
for (i in new_column_names)
{cat(i,"summary:");print(table(df_recode[,i]));cat("\n")}
data_sub <- df_recode[,new_column_names]
# Function to define cases
f<-function(x){
visit<-c()
for (i in 1:4){
if (!is.na(x[i]))
{visit<-c(visit,x[i])}
}
if ("1" %in% visit){result= TRUE}
else{result=FALSE}
return (result)
}
# Apply the above function
df_recode$cases<-apply(data_sub, 1, f)
head(df_recode,10)
View(data_sub)
View(df_recode)
q4_data = df_recode %>%
mutate(
cases = as.factor(cases)
)
summary(q4_data$cases)
df_cases  <- df_recode %>%
select(IID,FID,cases)%>%
filter(cases==TRUE)
head(df_cases,10)
View(df_cases)
View(df_recode)
# YOUR CODE
q5_data = df_recode %>%
select(FID, IID, cases, f.22001.0.0, f.21003.0.0, f.21003.1.0, f.21003.2.0, f.21003.3.0) %>%
filter(cases == TRUE) %>%
head(10)
View(q5_data)
# YOUR CODE
q5_data = df_recode %>%
select(FID, IID, cases, f.22001.0.0, f.21003.0.0, f.21003.1.0, f.21003.2.0, f.21003.3.0) %>%
filter(cases == TRUE)
head(q5_data, 10)
View(sub_UKBB)
summary(q5_data$f.21003.0.0)
# check if you have ISLR package, if not, install it
if(!requireNamespace('ISLR')) install.packages('ISLR')
auto_data <- ISLR::Auto
#  fit a linear regression model
fit_1<-lm(mpg ~ weight, auto_data)
summary(fit_1)
View(auto_data)
?case_when
q10_data = auto_data %>%
mutate(
mpg = case_when(
mpg >= 23 ~ 1,
TRUE ~ 0
)
)
q10_data
View(auto_data)
q10_data = auto_data %>%
mutate(
mpg_level = case_when(
mpg >= 23 ~ 1,
TRUE ~ 0
)
)
# fit model
fit_10 = glm( )
q10_data = auto_data %>%
mutate(
mpg_level = case_when(
mpg >= 23 ~ 1,
TRUE ~ 0
)
)
# fit model
#fit_10 = glm( )
# fit model
fit_10 = glm(mpg_level ~ weight, q10_data)
q10_data = auto_data %>%
mutate(
mpg_level = case_when(
mpg >= 23 ~ 1,
TRUE ~ 0
)
)
View(q10_data)
q10_data = auto_data %>%
mutate(
mpg_level = case_when(
mpg >= 23 ~ 1,
TRUE ~ 0
),
mpg_level = as.factor(mpg_level)
)
# fit model
fit_10 = glm(mpg_level ~ weight, q10_data)
q10_data = auto_data %>%
mutate(
mpg_level = case_when(
mpg >= 23 ~ 1,
TRUE ~ 0
),
mpg_level = as.factor(mpg_level)
)
# fit model
fit_10 = glm(mpg_level ~ weight, family = binomial(link = 'logit'), q10_data)
summary(fit_10)
exp(-0.0041)
